{"mappings":"YAAC,IACOA,EACAC,EACAC,EAEAC,ECLIC,EDCJJ,EAAaK,SAASC,cAAc,sBACpCL,EAAcI,SAASC,cAAc,iBACrCJ,EAAeG,SAASC,cAAc,kBAEtCH,EAAa,WACjB,IAAMI,EAC0C,SAA9CN,EAAYO,aAAa,mBAA+B,EAC1DP,EAAYQ,aAAa,iBAAkBF,GAC3CP,EAAWU,UAAUC,OAAO,WAK5BC,eAH0BL,EAEtB,mBADA,qBAE6BF,SAASQ,K,EAG5CZ,EAAYa,iBAAiB,QAASX,GACtCD,EAAaY,iBAAiB,QAASX,GAGvCY,OAAOC,WAAW,sBAAsBF,iBAAiB,UAAU,SAAAG,GAC5DA,EAAEC,UACPlB,EAAWU,UAAUS,OAAO,WAC5BlB,EAAYQ,aAAa,iBAAiB,GAC1CG,eAAeQ,iBAAiBf,SAASQ,M,ICxB3C,mBADUT,EAyBTW,OAAOM,QAAQC,WAxBOJ,UACpBd,EAAEc,QACDd,EAAEmB,mBACFnB,EAAEoB,oBACFpB,EAAEqB,uBACF,SAAUR,GACR,IACE,IAAIS,EAAIC,KACNC,GAAKF,EAAErB,UAAYqB,EAAEG,eAAeC,iBAAiBb,GACrDc,EAAI,EACNH,EAAEG,IAAMH,EAAEG,KAAOL,KAGfK,EACJ,OAAOC,QAAQJ,EAAEG,G,GAErB,mBAAqB3B,EAAE6B,UACpB7B,EAAE6B,QAAU,SAAUhB,GACrB,IAAK,IAAIS,EAAIC,KAAMD,GAAK,IAAMA,EAAEQ,UAAY,CAC1C,GAAIR,EAAER,QAAQD,GAAI,OAAOS,EACzBA,EAAIA,EAAES,U,CAER,OAAO,I,GAIf9B,SAASS,iBAAiB,oBAAoB,W,kDAGxCsB,EAAe/B,SAASC,cAAiB,qBAC3C+B,EAAkBhC,SAACyB,iBAAc,mBAGnCQ,EAAAC,SAA8B,SACRC,GACpBA,EAAA1B,iBAAA,kBACIG,G,yDAQYZ,SAAKC,cAAa,sBAClBmC,EAAS,M,wBAOcL,EAAR1B,UAAVgC,IAAJ,S,OAI0BL,EAAbE,SAAR,SAAVC,GAC6BA,EAAL1B,iBAAjB,SAAT,SAAVG,GACqBU,KAALM,QAAR,UAEmBvB,UAAVS,OAAP,UAC6BiB,EAAR1B,UAAVS,OAAP,S,OAI6Bd,SAATQ,KAALC,iBACY,SACA,SAAVG,GAGH,IAFCA,EAAF0B,UAGUtC,SAATC,cAAd,iBAAjBI,UAAQS,OAAO,UACyBd,SAATC,cAAd,YAAZI,UAAFS,OAAO,U,IAGkC,GAGEiB,EAARtB,iBAAjB,SAAT,WACgCT,SAATC,cAAd,iBAAjBI,UAAAS,OAAO,UACiCQ,KAALjB,UAAVS,OAAP,S,OAIyB,WACH,IAANyB,EAAP,CACWC,aAAdxC,SAATC,cAAd,qBACqCwC,cAAfzC,SAATC,cAAd,sBACsCyC,MAAP1C,SAATC,cAAd,iBAMgC,SAAT0C,IACOJ,EAALG,MAANrC,UAAVC,OAAP,Y,CAJ8BiC,EAALC,aAAb/B,iBAAjB,QAATkC,GAC4CJ,EAALE,cAAdhC,iBAAjB,QAATkC,EAKgD,CAbA,GCrFjC,IAAIC,OAAO,UAAW,CAElCC,UAAW,aACXC,MAAM,EAGNC,WAAY,CACRC,GAAI,qBACJC,WAAW,GAIfC,WAAY,CACVC,OAAQ,sBACRC,OAAQ,uBAIVC,UAAW,CACTL,GAAI,sB","sources":["src/js/mobile-menu.js","src/js/modal.js","src/js/swiper.js"],"sourcesContent":["(() => {\n  const mobileMenu = document.querySelector('.js-menu-container');\n  const openMenuBtn = document.querySelector('.js-open-menu');\n  const closeMenuBtn = document.querySelector('.js-close-menu');\n\n  const toggleMenu = () => {\n    const isMenuOpen =\n      openMenuBtn.getAttribute('aria-expanded') === 'true' || false;\n    openMenuBtn.setAttribute('aria-expanded', !isMenuOpen);\n    mobileMenu.classList.toggle('is-open');\n\n    const scrollLockMethod = !isMenuOpen\n      ? 'disableBodyScroll'\n      : 'enableBodyScroll';\n    bodyScrollLock[scrollLockMethod](document.body);\n  };\n\n  openMenuBtn.addEventListener('click', toggleMenu);\n  closeMenuBtn.addEventListener('click', toggleMenu);\n\n  // Close the mobile menu on wider screens if the device orientation changes\n  window.matchMedia('(min-width: 768px)').addEventListener('change', e => {\n    if (!e.matches) return;\n    mobileMenu.classList.remove('is-open');\n    openMenuBtn.setAttribute('aria-expanded', false);\n    bodyScrollLock.enableBodyScroll(document.body);\n  });\n})();","!(function (e) {\n  'function' != typeof e.matches &&\n    (e.matches =\n      e.msMatchesSelector ||\n      e.mozMatchesSelector ||\n      e.webkitMatchesSelector ||\n      function (e) {\n        for (\n          var t = this,\n            o = (t.document || t.ownerDocument).querySelectorAll(e),\n            n = 0;\n          o[n] && o[n] !== t;\n\n        )\n          ++n;\n        return Boolean(o[n]);\n      }),\n    'function' != typeof e.closest &&\n      (e.closest = function (e) {\n        for (var t = this; t && 1 === t.nodeType; ) {\n          if (t.matches(e)) return t;\n          t = t.parentNode;\n        }\n        return null;\n      });\n})(window.Element.prototype);\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  /* Записываем в переменные массив элементов-кнопок и подложку.\n      Подложке зададим id, чтобы не влиять на другие элементы с классом overlay*/\n  var modalButtons = document.querySelectorAll('.js-open-modal'),\n    overlay = document.querySelector('.js-overlay-modal'),\n    closeButtons = document.querySelectorAll('.js-modal-close');\n\n  /* Перебираем массив кнопок */\n  modalButtons.forEach(function (item) {\n    /* Назначаем каждой кнопке обработчик клика */\n    item.addEventListener('click', function (e) {\n      /* Предотвращаем стандартное действие элемента. Так как кнопку разные\n            люди могут сделать по-разному. Кто-то сделает ссылку, кто-то кнопку.\n            Нужно подстраховаться. */\n      e.preventDefault();\n\n      /* При каждом клике на кнопку мы будем забирать содержимое атрибута data-modal\n            и будем искать модальное окно с таким же атрибутом. */\n      var modalId = this.getAttribute('data-modal'),\n        modalElem = document.querySelector(\n          '.modal[data-modal=\"' + modalId + '\"]'\n        );\n\n      /* После того как нашли нужное модальное окно, добавим классы\n            подложке и окну чтобы показать их. */\n      modalElem.classList.add('active');\n      overlay.classList.add('active');\n    }); // end click\n  }); // end foreach\n\n  closeButtons.forEach(function (item) {\n    item.addEventListener('click', function (e) {\n      var parentModal = this.closest('.modal');\n\n      parentModal.classList.remove('active');\n      overlay.classList.remove('active');\n    });\n  }); // end foreach\n\n  document.body.addEventListener(\n    'keyup',\n    function (e) {\n      var key = e.keyCode;\n\n      if (key == 27) {\n        document.querySelector('.modal.active').classList.remove('active');\n        document.querySelector('.overlay').classList.remove('active');\n      }\n    },\n    false\n  );\n\n  overlay.addEventListener('click', function () {\n    document.querySelector('.modal.active').classList.remove('active');\n    this.classList.remove('active');\n  });\n}); // end ready\n\n(() => {\n    const refs = {\n      openModalBtn: document.querySelector(\"[data-modal-open]\"),\n      closeModalBtn: document.querySelector(\"[data-modal-close]\"),\n      modal: document.querySelector(\"[data-modal]\"),\n    };\n  \n    refs.openModalBtn.addEventListener(\"click\", toggleModal);\n    refs.closeModalBtn.addEventListener(\"click\", toggleModal);\n  \n    function toggleModal() {\n      refs.modal.classList.toggle(\"is-hidden\");\n    }\n})();","const swiper = new Swiper('.swiper', {\n   // Optional parameters\n   direction: 'horizontal',\n   loop: true,\n \n   // If we need pagination\n   pagination: {\n       el: '.swiper-pagination',\n       clickable: true,\n   },\n \n   // Navigation arrows\n   navigation: {\n     nextEl: '.swiper-button-next',\n     prevEl: '.swiper-button-prev',\n   },\n \n   // And if we need scrollbar\n   scrollbar: {\n     el: '.swiper-scrollbar',\n   },\n });"],"names":["mobileMenu","openMenuBtn","closeMenuBtn","toggleMenu","e1","document","querySelector","isMenuOpen","getAttribute","setAttribute","classList","toggle","bodyScrollLock","body","addEventListener","window","matchMedia","e","matches","remove","enableBodyScroll","Element","prototype","msMatchesSelector","mozMatchesSelector","webkitMatchesSelector","t","this","o","ownerDocument","querySelectorAll","n","Boolean","closest","nodeType","parentNode","overlay","closeButtons","modalButtons","forEach","item","modalId","add","keyCode","refs","openModalBtn","closeModalBtn","modal","toggleModal","Swiper","direction","loop","pagination","el","clickable","navigation","nextEl","prevEl","scrollbar"],"version":3,"file":"index.3e502bca.js.map"}